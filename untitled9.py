# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_3onam0Nt_pYI2DX8yTncBkWxckNRi_O
"""

import numpy as np
import pandas as pd

temp_df = pd.read_csv('/content/output1 (1).csv')

temp_df.set_index('index',inplace = True)

temp_df.isnull().sum()

temp_df.head(2)

temp_df.columns

len(temp_df['processor_name'].value_counts().index)

temp_df.head(2)

temp_df[temp_df['processor_brand'].str.contains('sanpdragon')]

pd.set_option('display.max_colwidth', None)
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)

temp_df.loc[493,'processor_brand'] = 'snapdragon'
temp_df.loc[493,'processor'] = 'Snapdragon 680, Octa Core, 2.4â€‰GHz Processor	'
temp_df.loc[493,'processor_name'] = 'Snapdragon 680'

temp_df[temp_df['processor_brand'].str.contains('Snapdragon')]
temp_df.loc[993, 'processor_brand'] = 'snapdragon'

temp_df.loc[993,:]

temp_df[temp_df['processor_name'].str.contains('Sanpdragon')]

temp_df['brand_name'].unique()

temp_df.head(2)

temp_df['processor_brand'].unique()

temp_df['fast_charging'].unique()

x = temp_df[temp_df['fast_charging'] == -1].index
x #all the -1 fast charging values have been set to 0

temp_df.loc[x,'fast_charging'] = 0

temp_df['battery_capacity'].unique()

temp_df[temp_df['ram_capacity'] == 1]

temp_df.head(2)

len(temp_df['display'].unique())

temp_df.drop(columns = ['ram_capacity'],inplace = True)

len(temp_df['camera'].unique())

temp_df['ppi'] = round(np.sqrt(temp_df['res_width'] **2 + temp_df['res_height'] **2) / temp_df['screen_size'])
temp_df['ppi'] = temp_df['ppi'].astype(int)

temp_df['aspect_ratio'] = temp_df['res_width'] /temp_df['res_height']

temp_df['screen_area'] = (temp_df['res_width'] * temp_df['res_height']) / temp_df['ppi'] **2

temp_df.head(2)

from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import OneHotEncoder, StandardScaler
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression, Ridge, Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor, AdaBoostRegressor, ExtraTreesRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import r2_score, mean_absolute_error

numerical_features = ['rating', 'has_5g', 'has_nfc', 'has_ir_blaster', 'num_cores', 'processor_speed', 'ram', 'battery_capacity', 'fast_charging', 'ppi','aspect_ratio', 'screen_area','internal_memory', 'screen_size', 'refresh_rate', 'num_rear_cameras', 'num_front_cameras', 'primary_camera_rear', 'primary_camera_front', 'extended_memory', 'res_width', 'res_height']
categorical_features = ['brand_name', 'model', 'sim', 'processor', 'processor_name', 'processor_brand', 'card', 'os']

for col in numerical_features:
    temp_df[col] = pd.to_numeric(temp_df[col], errors='coerce')

X = temp_df.drop('price', axis=1)
y = temp_df['price']

step1 = ColumnTransformer(
    transformers=[
        ('cat', OneHotEncoder(handle_unknown='ignore'), categorical_features),
        ('num', Pipeline(steps=[
            ('imputer', SimpleImputer(strategy='mean')),
            ('scaler', StandardScaler())
        ]), numerical_features)
    ])

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

models = {
    'Linear Regression': LinearRegression(),
    'Ridge': Ridge(alpha=10),
    'Lasso': Lasso(alpha=0.001),
    'K-Neighbors Regressor': KNeighborsRegressor(n_neighbors=3),
    'Decision Tree Regressor': DecisionTreeRegressor(max_depth=8),
    'Random Forest Regressor': RandomForestRegressor(n_estimators=100, random_state=3, max_samples=None, max_features=0.75, max_depth=15, bootstrap=True),
    'Gradient Boosting Regressor': GradientBoostingRegressor(n_estimators=500),
    'AdaBoost Regressor': AdaBoostRegressor(n_estimators=15,learning_rate=1.0),
    'Extra Trees Regressor': ExtraTreesRegressor(n_estimators=100, random_state=3, max_samples=0.5, max_features=0.75, max_depth=15, bootstrap=True),
    'Support Vector Regressor': SVR(kernel='rbf',C=10000,epsilon=0.1),
    'XGB Regressor': XGBRegressor(n_estimators=45,max_depth=5,learning_rate=0.5)
}

results = []
for name, model in models.items():
    pipe = Pipeline(steps=[('preprocessor', step1), ('model', model)])
    pipe.fit(X_train, y_train)
    y_pred = pipe.predict(X_test)
    r2 = r2_score(y_test, y_pred)
    mae = mean_absolute_error(y_test, y_pred)
    results.append((name, r2, mae))
    print(f"{name} R2 score: {r2}, MAE: {mae}")

df_results = pd.DataFrame(results, columns=['Model', 'R2 Score', 'MAE'])
df_results = df_results.sort_values(by='R2 Score', ascending=False).reset_index(drop=True)

print("\nRanked models by score:")
df_results

import pickle
pickle.dump(df,open('df.pkl','wb'))
pickle.dump(pipe,open('pipe.pkl','wb'))

